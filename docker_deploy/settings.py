"""
Django settings for kkit project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os,djcelery

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# salt
salt_api = "https://192.168.1.1:8002/"



# celery配置
djcelery.setup_loader()
CELERYD_CONCURRENCY = 20 # celery worker的并发数
CELERYD_MAX_TASKS_PER_CHILD = 200 # 每个worker执行了多少任务就会死掉
CELERYD_PREFETCH_MULTIPLIER = 4 # 去redis里面一次拿多少个任务回来
BROKER_URL= 'amqp://admin:admin@kkit_mq:5672'
CELERY_RESULT_BACKEND = 'redis://kkit_redis:6379/4'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24 #任务过期时间
CELERY_TIMEZONE='Asia/Shanghai'
USE_TZ = True
CELERY_ENABLE_UTC = True
CELERY_REDIS_HOST='kkit_redis'
CELERY_REDIS_DB= 4
CELERY_REDIS_PORT= 6379
# celery  end
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://kkit_redis:6379',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}



REDIS_TIMEOUT=7*24*60*60
CUBES_REDIS_TIMEOUT=60*60
NEVER_REDIS_TIMEOUT=365*24*60*60


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fe7bvey@xbzsh&dt^=8_pwt41lh3+ayhy+$^^voy-nl8t=3y(1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True 

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'kkitadmin',
    'MaintainWeb',
    'bernard',
    'django_celery_beat',
    'kkitsalt',
    'trouble',
    # 跨域的设置
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'session_security.middleware.SessionSecurityMiddleware',
    # 跨域的中间件

]

# 允许跨域访问的域名
CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = (
      '*'
)
# CORS_ORIGIN_WHITELIST = ()  # 或者定义允许的匹配路径正则表达式.
# CORS_ORIGIN_REGEX_WHITELIST = ('^(http?://)?(\w+.)?>localhost$', )   # 默认值:

CORS_ORIGIN_REGEX_WHITELIST = ()
# 跨域允许的方法
CORS_ALLOW_METHODS = (
'GET',
'POST',
'PUT',
'PATCH',
'DELETE',
'OPTIONS'
)
# 跨域允许的header
CORS_ALLOW_HEADERS = (
'x-requested-with',
'content-type',
'accept',
'origin',
'authorization',
'x-csrftoken'
)
#配置end

ROOT_URLCONF = 'kkit.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django.core.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'kkit.wsgi.application'






AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]




LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

# USE_TZ = True




# STATIC_URL = '/statics/'

TEMPLATE_DIRS = (os.path.join(BASE_DIR,  'templates'),
                 os.path.join(BASE_DIR, 'kkitadmin/templates'),
                 )


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'kkit',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'kkit_mysql',
        'PORT': '3306',
    }
}

# redis
SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS = {
    'host': 'kkit_redis',
    'port': 6379,
    'db': 5,
    'password': '',
    # 'prefix': 'testJdango',
    'socket_timeout': 10
}



AUTH_USER_MODEL = 'MaintainWeb.UserProfile'

STATIC_URL = '/statics/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'statics'),
#    os.path.join(BASE_DIR, 'kkitadmin/statics'),
]

LOGIN_URL = '/login/'

# kkit中间机
SHELLINABOX = {
    'host':'kkit_web_shell',
    'port':4200,
    'username':'luckman',
    'password': 'luckman'
}

# 邮箱配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = False   #是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
EMAIL_USE_SSL = True    #是否使用SSL加密，qq企业邮箱要求使用
EMAIL_HOST = 'smtp.yeah.net'   #发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱
EMAIL_PORT = 465     #发件箱的SMTP服务器端口
EMAIL_HOST_USER = ''    #发送邮件的邮箱地址
EMAIL_HOST_PASSWORD = ''         #发送邮件的邮箱密码(这里使用的是授权码)


# 最多上传文件数量

MaxUploadFiles = 6
# 后台服务器执行脚本位置
MultiTaskScript = '%s/%s'%(BASE_DIR,'backend/multitask.py')
# 秘钥位置
RSA_PRIVATE_KEY_FILE = '%s/%s'%(BASE_DIR,'var/rsa_key/id_rsa')
# 多任务数量
MaxTaskProcesses = 10
# 文件上传路径,这个位置不要改啦大兄弟。我嫌费劲那边写死了。。
FileUploadDir = '/srv/salt/base'
# saltstack master地址
salt_master_ip_addr = '192.168.10.10'
